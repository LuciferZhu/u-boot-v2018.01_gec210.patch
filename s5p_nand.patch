--- ../u-boot-samsung-dev/cpu/s5pc11x/nand.c	2011-03-21 15:15:23.000000000 +0800
+++ drivers/mtd/nand/s5p_nand.c	2018-06-06 22:05:44.121795642 +0800
@@ -1,4 +1,4 @@
-/*
+ï»¿/*
  * (C) Copyright 2006 DENX Software Engineering
  *
  * See file CREDITS for list of people who contributed to this
@@ -22,12 +22,11 @@
 
 #include <common.h>
 
-#if defined(CONFIG_CMD_NAND)
 #include <nand.h>
-#include <regs.h>
+#include <asm/arch/s5pc110.h>
 
 #include <asm/io.h>
-#include <asm/errno.h>
+#include <errno.h>
 
 /* Nand flash definition values by jsgood */
 #define S3C_NAND_TYPE_UNKNOWN	0x0
@@ -39,9 +38,9 @@
 int cur_ecc_mode = 0;
 int nand_type = S3C_NAND_TYPE_UNKNOWN;
 
+#if defined(CONFIG_S5P_NAND_HWECC)
 /* Nand flash oob definition for SLC 512b page size by jsgood */
 static struct nand_ecclayout s3c_nand_oob_16 = {
-	.useecc = MTD_NANDECC_AUTOPLACE,	/* Only for U-Boot */
 	.eccbytes = 4,
 	.eccpos = {1, 2, 3, 4},
 	.oobfree = {
@@ -51,7 +50,6 @@
 
 /* Nand flash oob definition for SLC 2k page size by jsgood */
 static struct nand_ecclayout s3c_nand_oob_64 = {
-	.useecc = MTD_NANDECC_AUTOPLACE,	/* Only for U-Boot */
 	.eccbytes = 16,
 	.eccpos = {40, 41, 42, 43, 44, 45, 46, 47,
 		   48, 49, 50, 51, 52, 53, 54, 55},
@@ -62,7 +60,6 @@
  
 /* Nand flash oob definition for MLC 2k page size by jsgood */
 static struct nand_ecclayout s3c_nand_oob_mlc_64 = {
-	.useecc = MTD_NANDECC_AUTOPLACE,	/* Only for U-Boot */
 	.eccbytes = 32,
 	.eccpos = {
 		   32, 33, 34, 35, 36, 37, 38, 39,
@@ -74,9 +71,9 @@
 		 .length = 28}}
 };
 
+#if 0
 /* Nand flash oob definition for 4Kb page size with 8_bit ECC */
 static struct nand_ecclayout s3c_nand_oob_128 = {
-        .useecc = MTD_NANDECC_AUTOPLACE,
         .eccbytes = 104,
         .eccpos = {
                    24, 25, 26, 27, 28, 29, 30, 31,
@@ -96,6 +93,9 @@
                 {.offset = 2,
                  .length = 22}}
 };
+#endif
+#endif
+
 #if defined(S3C_NAND_DEBUG)
 /*
  * Function to print out oob buffer for debugging
@@ -159,15 +159,7 @@
 	return 1;
 }
 
-/*
- * We don't use bad block table
- */
-static int s3c_nand_scan_bbt(struct mtd_info *mtdinfo)
-{
-	return nand_default_bbt(mtdinfo);
-}
-
-#if defined(CFG_NAND_HWECC)
+#if defined(CONFIG_S5P_NAND_HWECC)
 
 /*
  * Function for checking ECCEncDone in NFSTAT
@@ -653,17 +645,16 @@
 	return ret;
 }
 
-void s3c_nand_write_page_8bit(struct mtd_info *mtd, struct nand_chip *chip,
+int s3c_nand_write_page_8bit(struct mtd_info *mtd, struct nand_chip *chip,
 				  const uint8_t *buf)
 {	
-	u_long nfreg;
 	int i, eccsize = 512;
 	int eccbytes = 13;
 	int eccsteps = mtd->writesize / eccsize;
 	int badoffs = mtd->writesize == 512 ? NAND_SMALL_BADBLOCK_POS : NAND_LARGE_BADBLOCK_POS;
 
 	uint8_t *ecc_calc = chip->buffers->ecccalc;
-	uint8_t *p = buf;
+	const uint8_t *p = buf;
 	
 	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
 		s3c_nand_enable_hwecc_8bit(mtd, NAND_ECC_WRITE);
@@ -673,20 +664,17 @@
 
 	chip->oob_poi[badoffs] = 0xff;
 	for (i = 0; i <= eccbytes * (mtd->writesize / eccsize); i++) {
-#if defined(CONFIG_EVT1)
 		chip->oob_poi[i+12] = ecc_calc[i];
-#else
-		chip->oob_poi[i] = ecc_calc[i];
-#endif
 	}
 
 	chip->write_buf(mtd, chip->oob_poi, mtd->oobsize);
+
+	return 0;
 }
 
 int s3c_nand_read_page_8bit(struct mtd_info *mtd, struct nand_chip *chip,
 				uint8_t *buf)
 {
-	u_long nfreg;
 	int i, stat, eccsize = 512;
 	int eccbytes = 13;
 	int eccsteps = mtd->writesize / eccsize;
@@ -695,11 +683,9 @@
 	
 	/* Step1: read whole oob */
 	col = mtd->writesize;
-#if defined(CONFIG_EVT1)
+
 	chip->cmdfunc(mtd, NAND_CMD_RNDOUT, col+12, -1);
-#else
-	chip->cmdfunc(mtd, NAND_CMD_RNDOUT, col, -1);
-#endif
+
 	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
 
 	col = 0;
@@ -724,9 +710,6 @@
 
 int s3c_nand_read_oob_8bit(struct mtd_info *mtd, struct nand_chip *chip, int page, int sndcmd)
 {
-        int eccbytes = chip->ecc.bytes;
-        int secc_start = mtd->oobsize - eccbytes;
-
         if (sndcmd) {
                 chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
                 sndcmd = 0;
@@ -739,8 +722,6 @@
 int s3c_nand_write_oob_8bit(struct mtd_info *mtd, struct nand_chip *chip, int page)
 {
         int status = 0;
-        int eccbytes = chip->ecc.bytes;
-        int secc_start = mtd->oobsize - eccbytes;
 
         chip->cmdfunc(mtd, NAND_CMD_SEQIN, mtd->writesize, page);
 
@@ -786,16 +767,13 @@
 }
 
 static int s3c_nand_read_oob_1bit(struct mtd_info *mtd, struct nand_chip *chip,
-			     int page, int sndcmd)
+			     int page)
 {
 	uint8_t *ecc_calc = chip->buffers->ecccalc;
 	int eccbytes = chip->ecc.bytes;
 	int secc_start = mtd->oobsize - eccbytes;
 
-	if (sndcmd) {
-		chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
-		sndcmd = 0;
-	}
+	chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
 
 	chip->ecc.hwctl(mtd, NAND_ECC_READ);
 	chip->read_buf(mtd, chip->oob_poi, secc_start);
@@ -808,11 +786,11 @@
 		chip->ecc.correct(mtd, chip->oob_poi, chip->oob_poi + secc_start, 0);
 #endif
 
-	return sndcmd;
+	return 0;
 }
 
-static void s3c_nand_write_page_1bit(struct mtd_info *mtd, struct nand_chip *chip,
-				  const uint8_t *buf)
+static int s3c_nand_write_page_1bit(struct mtd_info *mtd, struct nand_chip *chip,
+				  const uint8_t *buf, int oob_required, int page)
 {
 	int i, eccsize = chip->ecc.size;
 	int eccbytes = chip->ecc.bytes;
@@ -842,10 +820,12 @@
 		chip->oob_poi[secc_start + i] = ecc_calc[chip->ecc.total + i];
 
 	chip->write_buf(mtd, chip->oob_poi + secc_start, eccbytes);
+
+	return 0;
 }
 
 static int s3c_nand_read_page_1bit(struct mtd_info *mtd, struct nand_chip *chip,
-				uint8_t *buf)
+				uint8_t *buf, int oob_required, int page)
 {
 	int i, stat, eccsize = chip->ecc.size;
 	int eccbytes = chip->ecc.bytes;
@@ -895,7 +875,7 @@
  * Written by jsgood
  */
 static int s3c_nand_read_page_4bit(struct mtd_info *mtd, struct nand_chip *chip,
-				uint8_t *buf)
+				uint8_t *buf, int oob_required, int page)
 {
 	int i, stat, eccsize = chip->ecc.size;
 	int eccbytes = chip->ecc.bytes;
@@ -931,8 +911,8 @@
  * Hardware specific page write function for MLC.
  * Written by jsgood
  */
-static void s3c_nand_write_page_4bit(struct mtd_info *mtd, struct nand_chip *chip,
-				  const uint8_t *buf)
+static int s3c_nand_write_page_4bit(struct mtd_info *mtd, struct nand_chip *chip,
+				  const uint8_t *buf, int oob_required, int page)
 {
 	int i, eccsize = chip->ecc.size;
 	int eccbytes = chip->ecc.bytes;
@@ -953,6 +933,8 @@
 		chip->oob_poi[mecc_pos[i]] = ecc_calc[i];
 
 	chip->write_buf(mtd, chip->oob_poi, mtd->oobsize);
+
+	return 0;
 }
 #endif
 
@@ -974,20 +956,20 @@
  * Members with a "?" were not set in the merged testing-NAND branch,
  * so they are not set here either.
  */
-void board_nand_init(struct nand_chip *nand)
+int board_nand_init(struct nand_chip *nand)
 {
-#if defined(CFG_NAND_HWECC)
+#if defined(CONFIG_S5P_NAND_HWECC)
 	int i;
-	u_char tmp;
+	u_char tmp, cellinfo;
 	struct nand_flash_dev *type = NULL;
 #endif
+	pr_debug("%s() in\n", __func__);
 
 	NFCONT_REG 		&= ~NFCONT_WP;
 	nand->IO_ADDR_R		= (void __iomem *)(NFDATA);
 	nand->IO_ADDR_W		= (void __iomem *)(NFDATA);
 	nand->cmd_ctrl		= s3c_nand_hwcontrol;
 	nand->dev_ready		= s3c_nand_device_ready;
-	nand->scan_bbt		= s3c_nand_scan_bbt;
 	nand->options		= 0;
 
 #if defined(CFG_NAND_FLASH_BBT)
@@ -996,7 +978,7 @@
 		nand->options		|= NAND_SKIP_BBTSCAN;
 #endif
 
-#if defined(CFG_NAND_HWECC)
+#if defined(CONFIG_S5P_NAND_HWECC)
 	nand->ecc.mode		= NAND_ECC_HW;
 	nand->ecc.hwctl		= s3c_nand_enable_hwecc;
 	nand->ecc.calculate	= s3c_nand_calculate_ecc;
@@ -1012,20 +994,23 @@
 	tmp = readb(nand->IO_ADDR_R); /* Device ID */
 
 	for (i = 0; nand_flash_ids[i].name != NULL; i++) {
-		if (tmp == nand_flash_ids[i].id) {
+		if (tmp == nand_flash_ids[i].dev_id) {
 			type = &nand_flash_ids[i];
 			break;
 		}
 	}
 
-	nand->cellinfo = readb(nand->IO_ADDR_R);	/* 3rd byte */
+	pr_debug("type->name=\"%s\"\n", type->name);
+
+	cellinfo = readb(nand->IO_ADDR_R);		/* 3rd byte */
 	tmp = readb(nand->IO_ADDR_R);			/* 4th byte */
 
 	if (!type->pagesize) {
-		if (((nand->cellinfo >> 2) & 0x3) == 0) {
+		if (((cellinfo >> 2) & 0x3) == 0) {
 			nand_type = S3C_NAND_TYPE_SLC;
 			nand->ecc.size = 512;
 			nand->ecc.bytes	= 4;
+			nand->ecc.strength = 1;
 
 			if ((1024 << (tmp & 0x3)) > 512) {
 				nand->ecc.read_page = s3c_nand_read_page_1bit;
@@ -1048,16 +1033,19 @@
 			nand->ecc.size = 512;
 			nand->ecc.bytes = 8;	/* really 7 bytes */
 			nand->ecc.layout = &s3c_nand_oob_mlc_64;
+			nand->ecc.strength = 1;
 		}
 	} else {
 		nand_type = S3C_NAND_TYPE_SLC;
 		nand->ecc.size = 512;
-		nand->cellinfo = 0;
 		nand->ecc.bytes = 4;
 		nand->ecc.layout = &s3c_nand_oob_16;
+		nand->ecc.strength = 1;
 	}
 #else
 	nand->ecc.mode = NAND_ECC_SOFT;
 #endif
+
+	return 0;
 }
-#endif /* (CONFIG_CMD_NAND) */
+
